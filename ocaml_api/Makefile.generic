# -*- Makefile -*-
BTARGET	 = $(TARGET).byte
OTARGET	 = $(TARGET).native
BLTARGET = $(TARGET).cma
NLTARGET = $(TARGET).cmxa
SLTARGET = $(TARGET).cmxs
STARGET	 = $(NLTARGET)

#########################
## Tools configuration ##
#########################

OCAMLBUILDFLAGS_COMMON = -cflag "-annot" -cflag "-bin-annot"

# In Emacs, use classic display to enable error jumping.
TERM = $(shell echo $$TERM)
ifeq ($(TERM), dumb)
 OCAMLBUILDFLAGS = $(OCAMLBUILDFLAGS_COMMON) -tag debug -classic-display
else
 OCAMLBUILDFLAGS = $(OCAMLBUILDFLAGS_COMMON)
endif

OCAMLBUILD = ocamlbuild -use-ocamlfind $(OCAMLBUILDFLAGS)

OCAMLDOC = ocamldoc
HEADACHE = headache

#########
# Rules #
#########

.PHONY: configure all-generic byte opt doc clean dist install uninstall headers clear

all-generic: configure clear byte opt

$(TARGET):
	ln -s $(STARGET) $(TARGET)

clear:
	rm -f $(STARGET)

byte: $(BLTARGET)

opt: $(NLTARGET) $(SLTARGET)

test.byte: byte
	$(OCAMLBUILD) -I src src/test.byte

test.opt: opt
	$(OCAMLBUILD) -I src src/test.native

%:
	@ $(OCAMLBUILD) src/$@

byte-debug:
	$(OCAMLBUILD) -tag debug src/$(BTARGET)
	rm -f $(STARGET)
	ln -s $(BTARGET) $(STARGET)


install:
	ocamlfind install $(TARGET) META              \
	_build/src/blacsapi.a _build/src/blacsapi.cm* \
	_build/src/api/*.cmi   _build/src/api/*.cmx   \
	_build/src/types/*.cmi _build/src/types/*.cmx
uninstall:
	ocamlfind remove $(TARGET)

#######################
# Administrative part #
#######################

headers:
	for i in src/*.ml src/*.mli src/*.mly; do \
	   $(HEADACHE) -h admin/header -c admin/headache.cfg $$i; \
	done

clean:
	@ $(OCAMLBUILD) -clean
	find . -name '*~' -exec rm '{}' \;
	rm -fr *~ $(TARGET) $(PACKAGE) $(PACKAGE).tar.gz doc

doc: byte
	$(OCAMLBUILD) $(TARGET).docdir/index.html
	mkdir -p doc/html
	rm -f $(TARGET).docdir/style.css 2> /dev/null
	mv $(TARGET).docdir/* doc/html
	rm $(TARGET).docdir

dist:
	rm -fr $(PACKAGE)
	mkdir $(PACKAGE)
	for i in `cat distributed_files` doc/html/*.html; do	\
	  if test -f $$i; then					\
	    rsync -R $$i $(PACKAGE);				\
	  else							\
	    mkdir -p $$i;					\
	  fi;							\
	done
	tar cvfz $(PACKAGE).tar.gz $(PACKAGE)

check: all
	$(MAKE) -C tests check
